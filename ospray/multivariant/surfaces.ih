// Copyright 2009-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

#pragma once

#include "Multivariant.ih"
#include "MultivariantMaterial.ih"

struct SurfaceShadingInfo
{
  vec3f shadedColor;
  vec3f transmission;
  vec3f albedo;
};

typedef SurfaceShadingInfo SSI;

SSI computeShading(const Multivariant *uniform self,
    const FrameBuffer *uniform fb,
    const World *uniform world,
    const DifferentialGeometry &dg,
    ScreenSample &sample,
    varying LDSampler *uniform ldSampler,
    const varying vec3f &inDir,
    const float time);

vec3f evaluateLights(
    const World *uniform world, const DifferentialGeometry &dg, const Ray &ray);

struct MultivariantBSDF
{
  vec3f diffuse;
  vec3f specular;
  float shininess;
  vec3f transmission;
  vec3f albedo;
};

inline MultivariantBSDF evalMaterial(const DifferentialGeometry &dg)
{
  const MultivariantMaterial *mat = (const MultivariantMaterial *)dg.material;

  // defaults
  MultivariantBSDF res;
  res.diffuse = make_vec3f(dg.color);
  res.specular = make_vec3f(0.0f);
  res.shininess = 10.0f;
  res.transmission = make_vec3f(1.f - dg.color.w);

  foreach_unique (m in mat) {
    if (m != NULL /*&& m->super.material.type == MATERIAL_TYPE_OBJ*/) {
      float d = m->d * get1f(m->dMap, dg, 1.f) * dg.color.w;

      res.diffuse = res.diffuse * m->Kd;
      if (valid(m->KdMap)) {
        vec4f Kd_from_map = get4f(m->KdMap, dg);
        res.diffuse = res.diffuse * make_vec3f(Kd_from_map);
        d *= Kd_from_map.w;
      }
      res.diffuse = res.diffuse * d;
      res.specular = d * m->Ks * get3f(m->KsMap, dg, make_vec3f(1.f));
      res.shininess = m->Ns * get1f(m->NsMap, dg, 1.0f);
      res.transmission = m->Tf * d + make_vec3f(1.f - d);
    }
  }

  res.albedo = res.diffuse + res.specular; // before normalization!

  // convert from Phong exponent to Blinn
  res.shininess *= 4.0f;
  // BRDF normalization
  res.diffuse = res.diffuse * one_over_pi;
  res.specular = res.specular
      * ((res.shininess + 2.f) * one_over_four_pi
          * rcp(2.f - exp(res.shininess * -lntwo_over_two)));

  return res;
}
